%{

#include <stdio.h>
extern FILE *yyin;
extern char *yytext;
extern int yylineno;
int yylex();
int yyerror();

%}

%token FOR UNTIL WHILE TIP_DATA START_PROGRAM CONSTANTA STOP_PROGRAM IDENTIFICATOR ATRIBUIRE NUMAR BOOL OPERATOR_LOGIC OPERATOR_RELATIONAL OPERATOR_ARITMETIC IF THEN ELSE ENDIF DO_FOR DO_WHILE ENDFOR ENDWHILE VOID RETURN STRUCT START_DECLARATII SFARSIT_DECLARATII START_DECLARATII_FUNCTIE SFARSIT_DECLARATII_FUNCTIE
%start PROGRAM 

%%

PROGRAM : START_DECLARATII DECLARATII SFARSIT_DECLARATII START_PROGRAM '{' INSTRUCTIUNI '}' STOP_PROGRAM START_DECLARATII_FUNCTIE DECLARATII_FUNCTIE SFARSIT_DECLARATII_FUNCTIE  {
    printf("Program corect sintactic!\n");
}
        ;

DECLARATII_FUNCTIE : DECLARATIE_FUNCTIE
                   | DECLARATII_FUNCTIE DECLARATIE_FUNCTIE
                   ;

DECLARATIE_FUNCTIE : TIP_DATA IDENTIFICATOR '(' LISTA_PARAMETRI ')' '{' INSTRUCTIUNI RETURN TIP_DATA '.' '}'
                   | VOID IDENTIFICATOR '(' LISTA_PARAMETRI ')' '{' INSTRUCTIUNI '}'
                   ;

DECLARATII : DECLARATIE '.'
           | DECLARATII DECLARATIE '.'
           ;

DECLARATII_STRUCTURA : DECLARATIE_STRUCTURA '.'
                     | DECLARATII_STRUCTURA DECLARATIE_STRUCTURA '.'
                     ;
DECLARATIE_STRUCTURA : TIP_DATA IDENTIFICATOR 
                     | TIP_DATA IDENTIFICATOR '[' NUMAR ']'
                     | STRUCT IDENTIFICATOR '{' DECLARATII_STRUCTURA '}'
                     ;

DECLARATIE : TIP_DATA IDENTIFICATOR
           | TIP_DATA IDENTIFICATOR '(' LISTA_PARAMETRI ')'
           | TIP_DATA IDENTIFICATOR '(' ')'
           | TIP_DATA IDENTIFICATOR '[' NUMAR ']'
           | STRUCT IDENTIFICATOR '{' DECLARATII_STRUCTURA '}'
           | CONSTANTA TIP_DATA IDENTIFICATOR
           | CONSTANTA TIP_DATA IDENTIFICATOR '[' NUMAR ']'
           | CONSTANTA STRUCT IDENTIFICATOR '{' DECLARATII_STRUCTURA '}'
           ;
LISTA_PARAMETRI : PARAMETRU
                | LISTA_PARAMETRI '~' PARAMETRU
                ;
PARAMETRU : TIP_DATA IDENTIFICATOR
          | TIP_DATA IDENTIFICATOR '[' NUMAR ']'
          
          ;
INSTRUCTIUNI : INSTRUCTIUNE '.'
             | INSTRUCTIUNI INSTRUCTIUNE '.'
             ;
INSTRUCTIUNE : IDENTIFICATOR ATRIBUIRE IDENTIFICATOR
             | IDENTIFICATOR ATRIBUIRE NUMAR
             | IDENTIFICATOR ATRIBUIRE '<' LISTA_VALORI '>'
             | INSTRUCTIUNE_IF
             | INSTRUCTIUNE_FOR
             | INSTRUCTIUNE_WHILE
             | EXPRESII_ARITMETICE
             ;
LISTA_VALORI : NUMAR
             | LISTA_VALORI '~' NUMAR
             ;

INITIALIZARE : TIP_DATA IDENTIFICATOR ATRIBUIRE IDENTIFICATOR
             | TIP_DATA IDENTIFICATOR ATRIBUIRE NUMAR
             | IDENTIFICATOR ATRIBUIRE IDENTIFICATOR
             | IDENTIFICATOR ATRIBUIRE NUMAR
             | IDENTIFICATOR
             ;

OPRIRE : IDENTIFICATOR OPERATOR_RELATIONAL IDENTIFICATOR
       | NUMAR OPERATOR_RELATIONAL IDENTIFICATOR
       | IDENTIFICATOR OPERATOR_RELATIONAL NUMAR
       ;

OPERAND : NUMAR
        | IDENTIFICATOR
        ;

EXPRESII_ARITMETICE : EXPRESIE_ARITMETICA 
                    | EXPRESIE_ARITMETICA OPERAND EXPRESII_ARITMETICE
                    | '(' EXPRESIE_ARITMETICA ')'
                    ;

EXPRESIE_ARITMETICA : OPERAND OPERATOR_ARITMETIC OPERAND
                    | OPERAND
                    ;

OPERATOR : OPERATOR_LOGIC
         | OPERATOR_ARITMETIC
         | OPERATOR_RELATIONAL
         ;
         
CONDITIE_COMPLEXA : BOOL
                  | OPERAND OPERATOR OPERAND
                  | OPERAND
                  | '(' CONDITIE_COMPLEXA ')'
                  ;

INSTRUCTIUNE_IF : IF '(' CONDITIE_COMPLEXA ')' THEN INSTRUCTIUNI ENDIF
                | IF '(' CONDITIE_COMPLEXA ')' THEN INSTRUCTIUNI ELSE INSTRUCTIUNI ENDIF
                ;

INSTRUCTIUNE_FOR : FOR INITIALIZARE UNTIL OPRIRE  DO_FOR INSTRUCTIUNI ENDFOR
                 ;

INSTRUCTIUNE_WHILE : WHILE CONDITIE_COMPLEXA DO_WHILE INSTRUCTIUNI ENDWHILE
                   ;

%%

int yyerror (char *errorText) {
    printf("Eroare: %s la linia: %d\n", errorText, yylineno);
}

int main (int argc, char **argv) {
    yyin = fopen(argv[1], "r");
    yyparse();
} 
